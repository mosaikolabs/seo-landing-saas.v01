---
// src/components/landing/CtaSection.astro
import Button from '../ui/Button.astro';
import Modal from '../ui/Modal.astro';

// Configuraci√≥n de la oferta con fecha l√≠mite
const offerDeadline = new Date();
offerDeadline.setDate(offerDeadline.getDate() + 2); // Oferta v√°lida por 2 d√≠as

const formatDate = (date) => {
  return date.toLocaleDateString('es-ES', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  });
};

const {
  title = '¬°√öLTIMAS 3 PLAZAS DISPONIBLES!',
  subtitle = 'Obtenga un an√°lisis SEO GRATIS de $497 y descubra c√≥mo puede aparecer en la primera p√°gina de Google para t√©rminos como "joyer√≠a fina en [su ciudad]" o "anillos de compromiso personalizados".',
  primaryCta = 'QUIERO MI AN√ÅLISIS GRATIS',
  secondaryCta = 'Hablar con un experto',
  features = [
    {
      icon: 'M13 10V3L4 14h7v7l9-11h-7z',
      text: 'An√°lisis detallado de palabras clave valorado en $297',
    },
    {
      icon: 'M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z',
      text: 'Estrategia personalizada para joyer√≠as valorada en $197',
    },
    {
      icon: 'M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z',
      text: 'Informe de competencia valorado en $97',
    },
  ],
  showContactForm = true,
} = Astro.props;

// Generar IDs √∫nicos para los modales
const contactModalId = 'contact-modal';
const expertModalId = 'expert-modal';
---

<section id="contacto" class="relative bg-gradient-to-br from-gray-900 to-gray-800 overflow-hidden py-20">
  {/* Elemento de urgencia */}
  <div class="absolute top-0 left-0 right-0 bg-red-600 text-white text-center py-2 px-4 font-bold animate-pulse">
    üö® OFERTA ESPECIAL: ¬°Solo 3 plazas disponibles! La oferta termina <span id="countdown" class="underline">pronto</span> üö®
  </div>
  
  {/* Contador regresivo */}
  <div id="countdown-timer" class="absolute top-16 left-1/2 transform -translate-x-1/2 bg-black/50 text-white text-center py-2 px-6 rounded-full font-mono text-lg font-bold flex items-center space-x-4 z-10">
    <div class="flex flex-col items-center">
      <span id="days" class="text-2xl">02</span>
      <span class="text-xs">D√çAS</span>
    </div>
    <span>:</span>
    <div class="flex flex-col items-center">
      <span id="hours" class="text-2xl">23</span>
      <span class="text-xs">HORAS</span>
    </div>
    <span>:</span>
    <div class="flex flex-col items-center">
      <span id="minutes" class="text-2xl">59</span>
      <span class="text-xs">MIN</span>
    </div>
    <span>:</span>
    <div class="flex flex-col items-center">
      <span id="seconds" class="text-2xl">59</span>
      <span class="text-xs">SEG</span>
    </div>
  </div>
  {/* Patr√≥n de fondo sutil */}
  <div class="absolute inset-0 opacity-5">
    <div class="absolute inset-0 bg-[url('/images/patterns/pattern-dark.svg')] bg-center"></div>
  </div>
  
  <div class="max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8 py-16 relative z-10 mt-8">
      <div class="inline-block bg-yellow-400 text-yellow-900 text-sm font-bold px-4 py-1 rounded-full mb-4 animate-bounce">
        üéØ OFERTA CON CUPO LIMITADO
      </div>
      <h2 class="text-4xl font-extrabold text-white sm:text-5xl lg:text-6xl bg-clip-text text-transparent bg-gradient-to-r from-yellow-400 to-yellow-600">
        {title}
      </h2>
      <p class="mt-6 text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed">
        {subtitle}
      </p>
      
      {/* Contador de personas viendo la oferta */}
      <div class="mt-6 inline-flex items-center bg-black/30 backdrop-blur-sm rounded-full px-6 py-2 text-sm text-yellow-300 border border-yellow-500/30">
        <span class="relative flex h-3 w-3 mr-2">
          <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span>
          <span class="relative inline-flex rounded-full h-3 w-3 bg-green-500"></span>
        </span>
        <span id="viewer-count">27 personas</span> est√°n viendo esta oferta ahora mismo
      </div>
      
      <div class="mt-10 space-y-4 max-w-2xl mx-auto">
        {/* Barra de disponibilidad */}
        <div class="bg-gray-800 rounded-full h-4 overflow-hidden">
          <div id="availability-bar" class="h-full bg-gradient-to-r from-green-500 to-yellow-500 rounded-full w-4/5" style="width: 80%;"></div>
        </div>
        <p class="text-sm text-gray-400">
          <span id="spots-left">3 plazas</span> disponibles de 15. ¬°No se quede fuera!
        </p>
        
        <div class="flex flex-col sm:flex-row justify-center gap-4 pt-4">
          <a
            href="#contacto"
            class="inline-flex items-center justify-center px-8 py-4 border border-transparent text-base font-bold rounded-full text-white bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 transform hover:scale-105 transition-all duration-200 shadow-lg shadow-yellow-500/20"
            data-modal-trigger={contactModalId}
          >
            {primaryCta} ‚Üí
          </a>
          <a
            href="#expert-chat"
            class="inline-flex items-center justify-center px-6 py-3 border border-gray-300 text-base font-medium rounded-full text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500"
            data-modal-trigger={expertModalId}
          >
            {secondaryCta}
          </a>
        </div>
        
        {/* Garant√≠a de satisfacci√≥n */}
        <div class="mt-6 flex items-center justify-center space-x-2 text-sm text-gray-400">
          <svg class="h-5 w-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          <span>Garant√≠a de satisfacci√≥n del 100% o le devolvemos su dinero</span>
        </div>
      </div>
  </div>
  
  <div class="mt-12 grid gap-8 md:grid-cols-3">
    {features.map((feature, index) => (
      <div class="relative flex flex-col items-center text-center p-6 bg-gray-800/50 rounded-xl border border-gray-700/50 hover:border-yellow-500/30 transition-all duration-300 group">
        <div class="absolute -top-4 left-1/2 transform -translate-x-1/2 bg-yellow-500 text-yellow-900 text-xs font-bold px-3 py-1 rounded-full">
          INCLUIDO
        </div>
        <div class="flex items-center justify-center h-14 w-14 rounded-full bg-gradient-to-br from-yellow-500 to-yellow-600 text-white mb-4 group-hover:scale-110 transition-transform duration-300">
          <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={feature.icon} />
          </svg>
        </div>
        <p class="text-base text-gray-300 group-hover:text-white transition-colors duration-300">{feature.text}</p>
      </div>
    ))}
  </div>
  
  {/* Modal de contacto */}
  {showContactForm && (
    <>
      <Modal 
        id={contactModalId}
        title="Solicitar An√°lisis Gratis"
        description="Complete el formulario y nos pondremos en contacto con usted en menos de 24 horas."
      >
        <form class="mt-6 space-y-6">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700">Nombre completo</label>
            <div class="mt-1">
              <input 
                type="text" 
                name="name" 
                id="name" 
                required 
                class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                autocomplete="name"
              >
            </div>
          </div>
          
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">Correo electr√≥nico</label>
            <div class="mt-1">
              <input 
                type="email" 
                name="email" 
                id="email" 
                required 
                class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                autocomplete="email"
              >
            </div>
          </div>
          
          <div>
            <label for="phone" class="block text-sm font-medium text-gray-700">Tel√©fono</label>
            <div class="mt-1">
              <input 
                type="tel" 
                name="phone" 
                id="phone" 
                class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                autocomplete="tel"
              >
            </div>
          </div>
          
          <div>
            <label for="website" class="block text-sm font-medium text-gray-700">Sitio web (opcional)</label>
            <div class="mt-1">
              <input 
                type="url" 
                name="website" 
                id="website" 
                class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                placeholder="https://"
              >
            </div>
          </div>
          
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input 
                id="privacy" 
                name="privacy" 
                type="checkbox" 
                required
                class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
              >
            </div>
            <div class="ml-3 text-sm">
              <label for="privacy" class="text-gray-700">
                Acepto la <a href="/politica-privacidad" class="text-primary hover:text-primary/80">Pol√≠tica de Privacidad</a>
              </label>
            </div>
          </div>
          
          <div>
            <Button 
              type="submit" 
              variant="primary" 
              class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
            >
              Enviar solicitud
            </Button>
          </div>
        </form>
      </Modal>
      
      {/* Modal de contacto con experto */}
      <Modal 
        id={expertModalId}
        title="Hablar con un experto"
        description="Programe una llamada con uno de nuestros especialistas en SEO para joyer√≠as."
      >
        <form class="mt-6 space-y-6">
          <div>
            <label for="expert-name" class="block text-sm font-medium text-gray-700">Nombre completo</label>
            <div class="mt-1">
              <input 
                type="text" 
                name="expert-name" 
                id="expert-name" 
                required 
                class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                autocomplete="name"
              >
            </div>
          </div>
          
          <div>
            <label for="expert-email" class="block text-sm font-medium text-gray-700">Correo electr√≥nico</label>
            <div class="mt-1">
              <input 
                type="email" 
                name="expert-email" 
                id="expert-email" 
                required 
                class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                autocomplete="email"
              >
            </div>
          </div>
          
          <div>
            <label for="expert-phone" class="block text-sm font-medium text-gray-700">Tel√©fono</label>
            <div class="mt-1">
              <input 
                type="tel" 
                name="expert-phone" 
                id="expert-phone" 
                required
                class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                autocomplete="tel"
              >
            </div>
          </div>
          
          <div>
            <label for="preferred-date" class="block text-sm font-medium text-gray-700">Fecha preferida</label>
            <div class="mt-1">
              <input 
                type="date" 
                name="preferred-date" 
                id="preferred-date" 
                required
                class="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary"
                min={new Date().toISOString().split('T')[0]}
              >
            </div>
          </div>
          
          <div>
            <label for="preferred-time" class="block text-sm font-medium text-gray-700">Hora preferida</label>
            <select 
              id="preferred-time" 
              name="preferred-time"
              class="mt-1 block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md"
              required
            >
              <option value="">Seleccione una hora</option>
              <option value="09:00">9:00 AM - 10:00 AM</option>
              <option value="10:00">10:00 AM - 11:00 AM</option>
              <option value="11:00">11:00 AM - 12:00 PM</option>
              <option value="13:00">1:00 PM - 2:00 PM</option>
              <option value="14:00">2:00 PM - 3:00 PM</option>
              <option value="15:00">3:00 PM - 4:00 PM</option>
            </select>
          </div>
          
          <div>
            <label for="message" class="block text-sm font-medium text-gray-700">Mensaje (opcional)</label>
            <div class="mt-1">
              <textarea 
                id="message" 
                name="message" 
                rows="3" 
                class="shadow-sm focus:ring-primary focus:border-primary mt-1 block w-full sm:text-sm border border-gray-300 rounded-md"
                placeholder="¬øEn qu√© podemos ayudarte?"
              ></textarea>
            </div>
          </div>
          
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input 
                id="expert-privacy" 
                name="expert-privacy" 
                type="checkbox" 
                required
                class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
              >
            </div>
            <div class="ml-3 text-sm">
              <label for="expert-privacy" class="text-gray-700">
                Acepto la <a href="/politica-privacidad" class="text-primary hover:text-primary/80">Pol√≠tica de Privacidad</a>
              </label>
            </div>
          </div>
          
          <div>
            <Button 
              type="submit" 
              variant="primary" 
              class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
            >
              Programar llamada
            </Button>
          </div>
        </form>
      </Modal>
    </>
  )}
</section>

<style>
  /* Animaci√≥n de fondo */
  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  /* Efecto de gradiente animado */
  .cta-gradient {
    background: linear-gradient(-45deg, #1e40af, #3b82f6, #60a5fa, #93c5fd);
    background-size: 400% 400%;
    animation: gradient 15s ease infinite;
  }
  
  /* Efecto de hover para las tarjetas de caracter√≠sticas */
  .feature-card {
    transition: all 0.3s ease;
  }
  
  .feature-card:hover {
    transform: translateY(-5px);
  }
  
  .feature-card:hover .feature-icon {
    transform: scale(1.1) rotate(5deg);
  }
  
  /* Mejoras de accesibilidad */
  .feature-card:focus-within {
    outline: 2px solid var(--color-primary);
    outline-offset: 4px;
    border-radius: 0.5rem;
  }
  
  /* Ajustes responsivos */
  @media (max-width: 640px) {
    .cta-buttons {
      flex-direction: column;
      gap: 1rem;
    }
    
    .cta-buttons .btn {
      width: 100%;
    }
  }
  
  /* Estilos para el checkbox personalizado */
  input[type="checkbox"]:checked {
    background-color: var(--color-primary);
    border-color: var(--color-primary);
  }
  
  /* Efecto de hover para los botones del modal */
  .modal-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  /* Transici√≥n suave para los inputs */
  input, select, textarea {
    transition: all 0.2s ease;
  }
  
  /* Mejora de legibilidad para los placeholders */
  ::placeholder {
    color: #9ca3af;
    opacity: 1;
  }
  
  /* Estilos para el scroll en modales */
  .modal-content {
    max-height: 70vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: var(--color-primary) #f3f4f6;
  }
  
  .modal-content::-webkit-scrollbar {
    width: 8px;
  }
  
  .modal-content::-webkit-scrollbar-track {
    background: #f3f4f6;
    border-radius: 4px;
  }
  
  .modal-content::-webkit-scrollbar-thumb {
    background-color: var(--color-primary);
    border-radius: 4px;
  }
</style>

<script>
  // Inicializar los modales cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    // Contador regresivo
    function updateCountdown() {
      const now = new Date();
      const offerEnd = new Date(now.getTime() + (48 * 60 * 60 * 1000)); // 48 horas desde ahora
      
      const diff = offerEnd - now;
      
      const days = Math.floor(diff / (1000 * 60 * 60 * 24));
      const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((diff % (1000 * 60)) / 1000);
      
      // Actualizar elementos del DOM
      const countdownElement = document.getElementById('countdown');
      if (countdownElement) {
        countdownElement.textContent = `el ${offerEnd.toLocaleDateString('es-ES', { day: 'numeric' })} a las ${offerEnd.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })}`;
      }
      
      // Actualizar contador
      const daysEl = document.getElementById('days');
      const hoursEl = document.getElementById('hours');
      const minutesEl = document.getElementById('minutes');
      const secondsEl = document.getElementById('seconds');
      
      if (daysEl) daysEl.textContent = days.toString().padStart(2, '0');
      if (hoursEl) hoursEl.textContent = hours.toString().padStart(2, '0');
      if (minutesEl) minutesEl.textContent = minutes.toString().padStart(2, '0');
      if (secondsEl) secondsEl.textContent = seconds.toString().padStart(2, '0');
    }
    
    // Actualizar contador cada segundo
    updateCountdown();
    setInterval(updateCountdown, 1000);
    
    // Simular contador de personas
    function updateViewerCount() {
      const viewerCount = Math.floor(Math.random() * 10) + 20; // N√∫mero aleatorio entre 20 y 30
      const viewerElement = document.getElementById('viewer-count');
      if (viewerElement) {
        viewerElement.textContent = `${viewerCount} personas`;
      }
      
      // Actualizar barra de disponibilidad (simulando que se acaban los cupos)
      const spotsLeft = Math.max(0, 3 - Math.floor(Math.random() * 2)); // 1-3 plazas restantes
      const spotsElement = document.getElementById('spots-left');
      const availabilityBar = document.getElementById('availability-bar');
      
      if (spotsElement) spotsElement.textContent = `${spotsLeft} ${spotsLeft === 1 ? 'plaza' : 'plazas'}`;
      if (availabilityBar) {
        const width = (spotsLeft / 15) * 100;
        availabilityBar.style.width = `${width}%`;
        
        // Cambiar color seg√∫n disponibilidad
        if (width < 20) {
          availabilityBar.className = 'h-full bg-gradient-to-r from-red-500 to-red-600 rounded-full';
        } else if (width < 50) {
          availabilityBar.className = 'h-full bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-full';
        } else {
          availabilityBar.className = 'h-full bg-gradient-to-r from-green-500 to-green-600 rounded-full';
        }
      }
    }
    
    // Actualizar contador de espectadores cada 5-15 segundos
    updateViewerCount();
    setInterval(updateViewerCount, Math.random() * 10000 + 5000);
    
    // Manejar los clics en los botones que abren modales
    document.querySelectorAll('[data-modal-trigger]').forEach(trigger => {
      trigger.addEventListener('click', (e) => {
        e.preventDefault();
        const modalId = trigger.getAttribute('data-modal-trigger');
        if (modalId && window.openModal) {
          window.openModal(modalId);
        }
      });
    });
    
    // Validaci√≥n de formularios
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Aqu√≠ ir√≠a la l√≥gica para enviar el formulario
        // Por ahora, mostramos un mensaje de √©xito
        const submitButton = form.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        
        // Simular env√≠o
        submitButton.disabled = true;
        submitButton.innerHTML = `
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Enviando...
        `;
        
        // Simular tiempo de env√≠o
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Mostrar mensaje de √©xito
        alert('¬°Gracias por su inter√©s! Nos pondremos en contacto con usted pronto.');
        form.reset();
        
        // Restaurar bot√≥n
        submitButton.disabled = false;
        submitButton.textContent = originalText;
        
        // Cerrar el modal si est√° dentro de uno
        const modal = form.closest('[role="dialog"]');
        if (modal) {
          const modalContainer = modal.closest('.modal-container');
          if (modalContainer && window.closeModal) {
            const modalId = modalContainer.id;
            if (modalId) {
              window.closeModal(modalId);
            }
          }
        }
      });
    });
    
    // Mejorar la accesibilidad de los campos de formulario
    const formInputs = document.querySelectorAll('input, select, textarea');
    formInputs.forEach(input => {
      // Agregar clases cuando el input tiene foco
      input.addEventListener('focus', (e) => {
        e.target.parentElement.classList.add('ring-2', 'ring-primary', 'ring-opacity-50');
      });
      
      input.addEventListener('blur', (e) => {
        e.target.parentElement.classList.remove('ring-2', 'ring-primary', 'ring-opacity-50');
      });
      
      // Validaci√≥n en tiempo real
      input.addEventListener('input', (e) => {
        validateField(e.target);
      });
    });
    
    // Funci√≥n para validar campos
    function validateField(field) {
      const isValid = field.checkValidity();
      const container = field.parentElement;
      
      if (field.value.trim() === '') {
        container.classList.remove('border-red-500', 'border-green-500');
        return;
      }
      
      if (isValid) {
        container.classList.remove('border-red-500');
        container.classList.add('border-green-500');
      } else {
        container.classList.remove('border-green-500');
        container.classList.add('border-red-500');
      }
    }
    
    // Manejar la selecci√≥n de fecha m√≠nima
    const dateInput = document.getElementById('preferred-date');
    if (dateInput) {
      // Establecer la fecha m√≠nima como hoy
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth() + 1).padStart(2, '0');
      const yyyy = today.getFullYear();
      dateInput.min = `${yyyy}-${mm}-${dd}`;
    }
  });
</script>
