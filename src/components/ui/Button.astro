---
// src/components/ui/Button.astro
// Extraer propiedades con valores por defecto
const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  fullWidth = false,
  // Manejamos tanto 'class' como 'className' para mayor compatibilidad
  class: className = '',
  disabled = false,
  children,
  // Extraemos el resto de props para pasarlas al elemento
  ...rest
} = Astro.props || {};

// Verificar si hay un manejador de clic personalizado
const hasClickHandler = 'onclick' in Astro.props || 'onClick' in Astro.props;

const baseStyles = 'inline-flex items-center justify-center font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-all duration-200 disabled:opacity-70 disabled:cursor-not-allowed';
const variants = {
  primary: 'bg-primary text-dark hover:bg-primary/90 focus:ring-primary/50',
  secondary: 'bg-secondary text-white hover:bg-secondary/90 focus:ring-secondary/50',
  accent: 'bg-accent text-white hover:bg-accent/90 focus:ring-accent/50',
  outline: 'border-2 border-primary text-primary bg-transparent hover:bg-primary/10 focus:ring-primary/50',
  ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-gray-200',
};
const sizes = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg',
};

const buttonClasses = [
  baseStyles,
  variants[variant] || variants.primary, // Asegurar que siempre haya un valor válido
  sizes[size] || sizes.md, // Asegurar que siempre haya un tamaño válido
  fullWidth ? 'w-full justify-center' : '',
  className
].filter(Boolean).join(' ');

// Si hay un href, renderizamos un enlace, de lo contrario un botón
const Tag = href ? 'a' : 'button';
const buttonAttributes = {
  ...(href && { href }),
  ...(!href && { type }),
  ...(disabled && { disabled: true, 'aria-disabled': 'true' }),
  class: buttonClasses,
  ...rest,
};

// Si hay un manejador de clic, añadimos el data attribute
if (hasClickHandler) {
  buttonAttributes['data-click-handler'] = '';
}
---

<Tag {...buttonAttributes}>
  <slot />
</Tag>

{/* Script para manejar el evento click en el cliente */}
{hasClickHandler && (
  <script>
    document.querySelector('[data-click-handler]')?.addEventListener('click', (e) => {
      e.preventDefault();
      // Aquí se puede añadir lógica personalizada si es necesario
      console.log('Botón clickeado');
    });
  </script>
)}

<style>
  /* Efectos de hover y focus */
  .btn-hover-effect {
    position: relative;
    overflow: hidden;
  }
  
  .btn-hover-effect:after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 5px;
    height: 5px;
    background: rgba(255, 255, 255, 0.5);
    opacity: 0;
    border-radius: 100%;
    transform: scale(1, 1) translate(-50%, -50%);
    transform-origin: 50% 50%;
  }
  
  .btn-hover-effect:focus:not(:active)::after {
    animation: ripple 1s ease-out;
  }
  
  @keyframes ripple {
    0% {
      transform: scale(0, 0);
      opacity: 0.5;
    }
    100% {
      transform: scale(20, 20);
      opacity: 0;
    }
  }
</style>
